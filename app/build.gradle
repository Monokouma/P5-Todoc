plugins {
    id 'com.android.application'
    id 'jacoco'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.monokoumacorporation.todoc"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled = true
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.2'

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.test:core:1.5.0'

    implementation "androidx.room:room-runtime:2.5.0"
    annotationProcessor "androidx.room:room-compiler:2.5.0"

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    implementation 'com.github.bumptech.glide:glide:4.12.0'

    implementation "com.google.dagger:hilt-android:2.44.2"
    annotationProcessor "com.google.dagger:hilt-android-compiler:2.44.2"

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.11.1'
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'

    androidTestImplementation "androidx.arch.core:core-testing:2.2.0"
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.5.1'
    androidTestUtil 'androidx.test:orchestrator:1.4.2'
}


// open JaCoCo report after generation
def openReport(htmlOutDir) {

    final reportPath = "$htmlOutDir"
    println(reportPath)

    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.isWindows()) {
        exec { commandLine 'cmd', '/c', "start $reportPath" }
    } else if (os.isMacOsX()) {
        exec { commandLine 'open', "$reportPath/index.html" }
    }
}

jacoco {
    toolVersion = "0.8.7"
}

tasks.withType(Test) {
    jacoco {
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*'] // Allows it to run on Java 11
    }
}




task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    doLast {
        openReport layout.buildDirectory.dir("reports/jacoco/$name/html").get().asFile
    }

    reports {
        xml.enabled(true)
        html.enabled(true)
        csv.enabled(true)
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*_Impl*.*', // Room implementations
            '**/*Binding.*',
            '**/*Fragment.*',
            '**/*Activity.*',
            '**/*Adapter.*',
            '**/*DiffCallback.*',
            '**/*ViewHolder.*',
            '**/*ViewModelFactory.*',
            '**/*Entity.*',
            '**/*AppDatabase*.*',
            '**/BuildConfigResolver.*',
            '**/MainThreadExecutor.*',
            '**/*Test*.*',
            'android/**/*.*'
    ]
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ]))
}